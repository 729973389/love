今天要做一个从rtsp视频流中截取一帧即frame，用到了“gocv.io/x/gocv”包，获得视频帧的流程如下：1.通过gocv.NewMat()来创建一个新的Mat类型的实体，这个Mat类型的数据结构表示n维密度集数字单通道或多通道数组，可以用于存储实体或者复数向量（vector）或矩阵(matrices)或图像。 2.通过cv,err := gocv.OpenCaputureVideo("rtsp://ip:port")来打开提供的视频流，并用cv来接收它的地址	3.通过调用vc.Read(x *Mat) 来读取VideoCpature的下一帧并赋值给传进来的Mat。	4.通过bbuff,err := gocv.IMEncode(".jpg",$Mat) 将已经存有一帧图像的Mat转换成".jpg"格式，并用buff来接收转换成功的[]byte	5.通过file,err := os.OpenFIle(timeToString()+".jpg",os.O_CREATE|O_RDWR,0666) // OpenFile is the generalized open call; most users will use Open
// or Create instead. It opens the named file with specified flag
// (O_RDONLY etc.). If the file does not exist, and the O_CREATE flag
// is passed, it is created with mode perm (before umask). If successful,
// methods on the returned File can be used for I/O.
// If there is an error, it will be of type *PathError.	先查看是否拥有该文件，由于传递了os.O_CREATE,在没有该文件的时候以给定的perm:0666 创建文件。用函数 newWriter：=bufio.NewWriter(file) 来生成一个带有buffer的writer，然后用函数newWriter.Writer(file)
// Write writes the contents of []byte into the buffer./ It returns the number of bytes written.
// If nn < len(p), it also returns an error explaining
// why the write is short. 将之前得到的帧比特写进创建的writer buffer中,左后调用newWriter.Flush() // Flush writes any buffered data to the underlying io.Writer.来将buffer中的数据写到底层的io.Writer中，即写到我们的文件中。
