||将数据同步写入硬盘中的指令： sync
在Linux系统中，为了加快数据的读取速度，所以在默认的情况中， 某些已经载入内存中的数据将不会直接被写回硬盘，而是先暂存在内存当中
$sync 命令行下输入sync，那么在内存中尚未被更新的数据，就会被写入硬盘中
||惯用的关机指令： shutdown
$sync;sync;sync;reboot 
halt      # 系统停止～屏幕可能会保留系统已经停止的讯息！
poweroff  # 系统关机，所以没有提供额外的电力，屏幕空白！
系统中所有服务的管理是 $systemctl 
||Linux文件权限与目录配置
Linux一般将文件可存取的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 等权限
$ls 查看文件
$ll 表示列出所有的文件详细的权限与属性 （包含隐藏文件，就是文件名第一个字符为“ . ”的文件）
[  权限 ][链接][拥有者][群组][文件大小][ 修改日期 ] [ 文件名]
1档案类型 2-4档案拥有者的权限 5-7 档案所属群组的权限 8-10其他人的权限
dr-xr-xr-x 1 root root  4192 Jul 20 10:22
第一个数字d为directory，-为文件，l为link，b为设备文件里的可随机存取设备，c表示序列埠设备，如鼠标键盘等一次性读取设备。
第二栏表示i-node 第三栏账号拥有者root，第四栏所属组群root，第五蓝为文件大小，默认为bytes，第6栏为mtime，文件内容修改日期
$export LC_ALL=en_US.utf8 修改语系
如果想要让系统默认的语系变成英文的话，那么你可以修改系统配置文件“/etc/locale.conf
如果文件名之前多一个“ . ”，则代表这个文件为“隐藏文件”，如.bashrc
$chgrp ：改变文件所属群组   -R 表示递归
$chgrp  -R wuff  $PWD/wuff
$chown ：改变文件拥有者
要注意的是， 使用者必须是已经存在系统中的帐号，也就是在/etc/passwd 这个文件中有纪录的使用者名称才能改变
$chown -R root /name  :$chown -R root $PWD/README.md
$chown wuff:wuff $PWD/README.md  //将拥有者和组群改回wuff
$chown wuff.wuff $PWD/README.md  //同上 ：换成 .
$chown .root /mnt/hgfs/wuff/README.md 只更改群组
！！账号最好别用小数点和冒号！！
$chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性
数字代表权限> r:4 > w:2 > x:1   分数累加
$touch test.txt; chmod 755 test.txt 拥有者rwx，群组rx，others  rx
符号类型改变权限的方法：
基本上就九个权限分别是（1）user （2）group （3）others
$chmod u=rwx,go=r test.txt    -rwxr--r--  
$chmod a+w test.txt  -rwxrw-rw-
$chmod a-w test.txt    -r-xr--r--
$cp srcfile dstfile     复制行为（cp）会复制执行者的属性与权限
文件是实际含有数据的地方，包括一般文本文件、数据库内容档、二进制可可执行文件（binary program）
r:读取此一文件的实际内容 w:可以编辑、新增或者是修改该文件的内容（但不含删除该文件） x:该文件具有可以被系统执行的权限,具备权限和可执行是两码事！
常用的拓展名：*.sh ： 脚本或批处理文件 （scripts），因为批处理文件为使用shell写成。
权限对目录的重要性关联：r:(read 如ls)w:（modify contents of directory），x:（access directory）.
$cd /run ; ll   srw-rw-rw-  1 root root0 Jul 20 09:29snapd-snap.socket=
数据输送档（FIFO, pipe）： FIFO也是一种特殊的文件类型，他主要的目的在解决多个程序同时存取一个文件所造成的错误问题。 FIFO是first-in-first-out的缩写,pipe.
!!命名避免特殊字符：? > < ; & ! [ ] | \ ' " ` （ ） { }
||Linux目录配置：
[200~/ （root, 根目录）：与开机系统有关：
/usr （unix software resource）：与软件安装/执行有关；
/var （variable）：与系统运行过程有关。
绝对路径：由根目录（/）开始写起的文件名或目录名称， 例如 /home/dmtsai/.bashrc；
相对路径：相对于目前路径的文件名写法。 例如 ./home/dmtsai 或 ../../home/dmtsai/ 等等。反正开头不是 / 就属于相对路径的写法
网络文件常常提到类似“./run.sh”之类的数据，这个指令的意义为何？答：由于指令的执行需要变量（bash章节才会提到）的支持，若你的可执行文件放置在本目录，并且本目录并非正规的可执行文件目录（/bin, /usr/bin等为正规），此时要执行指令就得要严格指定该可执行文件

./”代表“本目录”的意思

$uname -r   4.15.0-111-generic
$uname -m   x86_64
||Linux 文件与目录管理:
. 表示此层目录  $./hello
..表示上一层目录  $cd ..
-  代表前一个工作目录  $ cd -
~ 代表目前使用者身份所在的主目录 $cd ~
~account 代表该使用者的主文件目录 $cd ~wuff   /home/wuff
在所有目录下面都会存在的两个目录，分别是“.”与“..” 分别代表此层与上层目录的意思。根目录也存在这两个目录，不过根目录的..和.是同一个目录
$cd /mnt/hgfs     /mnt/hgfs     //change directory
$pwd    /mnt/hgfs   //print working directory
$mkdir test     //make a new directory named test
$rmdir  //remove an empty directory
$cd   ==   $cd ~    ok
$mkdir -p test1/test2/test3    make directory if test1/test2/test3 isn’t exist
$mkdir -m 754 test      drwxr-xr-- 
||$PATH关于可执行文件路径的变量：
执行一个指令的时候，系统会依照PATH的设置去每个PATH定义的目录下搜寻文件名为xx的可执行文件,先搜寻到的同名指令先被执行！ 
PATH（一定是大写）这个变量的内容是由一堆目录所组成的，每个目录中间用冒号（:）来隔开， 每个目录是有“顺序”之分的;不同身份使用者默认的PATH不同，默认能够随意执行的指令也不同（如root与dmtsai）；
复制、删除与移动： cp, rm, mv
cp src dst
rm -rf src
$mv test.txt test2.txt 
取得路径的文件名称与目录名称:
$ basename /home/wuff/Public/test/test2.txt    test2.txt
$dirname /home/wuff/Public/test/test2.txt  
/home/wuff/Public/test
||文件内容查阅:
cat 由第一行开始显示文件内容
tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！
nl 显示的时候，顺道输出行号！
more 一页一页的显示文件内容
less 与 more 类似，但是比 more 更好的是，他可以往前翻页！
head 只看头几行
tail 只看尾巴几行
od 以二进制的方式读取文件内容！
$tail -f xxx
 head -n 20 /etc/man_db.conf | tail -n 10 ”，这样就可以得到第 11 到第 20 行之间的内容了！
这两个指令中间有个管线 （|） 的符号存在，这个管线的意思是：“前面的指令所输出的讯息，请通过管线交由后续的指令继续使用”的意思。
修改文件时间或创建新文件： touch
||文件与目录的默认权限与隐藏权限:
若使用者创建为“文件”则默认“没有可执行（ x ）权限”，亦即只有 rw 这两个项目，也就是最大为 666 分，默认权限如下： -rw-rw-rw-
若使用者创建为“目录”，则由于 x 与是否可以进入此目录有关，因此默认为所有权限均开放，亦即为 777 分，默认权限如下： drwxrwxrwx
假设$umask  022 则文件 -rwxr--r--  目录 -rwxr-xr-x
chattr （设置文件隐藏属性）
$chattr +i test;lsattr test    ----i---------e--- ./test
$chmod 777 test   chmod: changing permissions of 'test': Operation not permitted
$chattr -i test;lsattr    --------------e--- ./test
最重要的当属 +i 与 +a 这个属性
如果是 log file 这种的登录文件，就更需要 +a 这个可以增加，但是不能修改旧有的数据与删除的参数了
lsattr 查看隐藏属性
文件特殊权限： SUID, SGID, SBIT
Set UID：SUID 权限仅对二进制程序（binary program）有效；
执行者对于该程序需要具有 x 的可执行权限；
本权限仅在执行该程序的过程中有效 （run-time）；
执行者将具有该程序拥有者 （owner） 的权限。
Set GID：group ID
观察文件类型：file
$which docker   /usr/bin/docker(from PATH)
whereis 只找系统中某些特定目录下面的文件
$whereis profile    profile: /etc/profile.d /etc/profile
locate 则是利用数据库来搜寻文件名,locate 寻找的数据是由“已创建的数据库 /var/lib/mlocate/” 里面的数据所搜寻到的.
$updatedb 更新locate数据库。
||总结：绝对路径：“一定由根目录 / 写起”；相对路径：“不由 / 写起，而是由相对当前目录写起”
特殊目录有：., .., -, ~, ~account需要注意；
与目录相关的指令有：cd, mkdir, rmdir, pwd 等重要指令；
rmdir 仅能删除空目录，要删除非空目录需使用“ rm -r ”指令；
使用者能使用的指令是依据 PATH 变量所规定的目录去搜寻的；
ls 可以检视文件的属性，尤其 -d, -a, -l 等选项特别重要！
文件的复制、删除、移动可以分别使用：cp, rm , mv等指令来操作；
检查文件的内容（读档）可使用的指令包括有：cat, tac, nl, more, less, head, tail, od 等
cat -n 与 nl 均可显示行号，但默认的情况下，空白行会不会编号并不相同；
touch 的目的在修改文件的时间参数，但亦可用来创建空文件；
一个文件记录的时间参数有三种，分别是 access time（atime）, status time （ctime）, modification time（mtime），ls 默认显示的是 mtime。
除了传统的rwx权限之外，在Ext2/Ext3/Ext4/xfs文件系统中，还可以使用chattr与lsattr设置及观察隐藏属性。 常见的包括只能新增数据的 +a 与完全不能更动文件的 +i 属性。
新建文件/目录时，新文件的默认权限使用 umask 来规范。默认目录完全权限为drwxrwxrwx， 文件则为-rw-rw-rw-。
文件具有SUID的特殊权限时，代表当使用者执行此一binary程序时，在执行过程中使用者会暂时具有程序拥有者的权限
目录具有SGID的特殊权限时，代表使用者在这个目录下面新建的文件之群组都会与该目录的群组名称相同。
目录具有SBIT的特殊权限时，代表在该目录下使用者创建的文件只有自己与root能够删除！
观察文件的类型可以使用 file 指令来观察；
搜寻指令的完整文件名可用 which 或 type ，这两个指令都是通过 PATH 变量来搜寻文件名；
搜寻文件的完整文件名可以使用 whereis 找特定目录或 locate 到数据库去搜寻，而不实际搜寻文件系统；
利用 find 可以加入许多选项来直接查询文件系统，以获得自己想要知道的文件名。

