总结上班第一周，1。了解熟悉了边缘节点，边缘设备，ssh连接服务器，docker容器的查看镜像和容器及bash输入技巧，MQTT协议及连接过程，json数据格式及Marshal，CA证书及实现加密，数据结构变量名和作用域的关系。   2.周5晚上温故了一下白天的代码，周6稳固了并发channel，了解了os.Args[],获取运行时加的参数,和flag包，flag.(bool/int/string/...)("name",default value,show notes),先解析命令，flag.Parse(),然后命令行就以[ ]byte 形式被保存在了flag.Args()。周日看了程序结构，知识点如下：	1。名称严格区分大小写。	2.关键字只能在语法中使用，不能作为名称，关键字如下：break,default,func,interface,select,case,defer,go,map,struct,const,fallthrough,if,range,type,continue,for,import,return,var. 	3.程序实体的第一个字母大小写决定其可见性是否跨包，即是否可被外界可见，可访问，可引用。但包本身由小写字母表示。	4.声明：给一个程序实体命名，设定其部分或全部属性。	5.var声明通常时为了那些初始化表达式类型不一致的局部变量。短边了声明不需要声明所有在左边的变量，如 var  err error  \n    a,err  := ioutil.ReadFile(filename)，声明了a，同时给err赋值 。	5指针：指针的值是一个变量地址，指向变量所在的内存空间，而变量存储值，变量出现在左边是赋值，右边是读取值。每一个聚合类型变量的组成（结构体的成员或数组中的元素）都是变量，所以也有一个地址。	6.new:new(T)创建一个未命名的T类型变量，初始化T类型的零值，并返回其地址，使得变量不需要变量名。	7.变量的声明周期：变量如果不可访问意味着它不会影响其他的计算过程则将被回收，编译器可以选择使用堆或栈来分配变量的空间，而不是基于关键字，如
var global *int // func f() {var x int//x = 1//global=&x}，可以通过外界访问内部变量，则x从f中逃逸，每一次变量逃逸都需要一次额外的内存分配过程。	8.赋值: x =1 ，多重赋值在实际更新变量前，右边的所有表达式被推演，如x,y=y,x交换变量,或者计算最大公约数 for y!=0{x,y = y,x&y//}return x,赋值变量类型必须精准匹配。	9.类型声明：类型定义值的特性，如大小（多少个元素或多少为），在内部如何表达，可以对其进行的操作，它们所关联的方法。type声明一个新的类名类型，他和某个已有类型使用同样的底层类型。type name underlying-type	10.包：包的初始化从初始化包级别的变量开始，先按照依赖解析，再按照声明顺序解析，任何文件都可以包含任意数量的func init(){...}初始化表达式，显示依赖顺序优先，初始化过程自下向上，main包最后初始化 .		10.作用域：声明将名字和程序实体关联起来，声明的作用域是所声明的源代码段，控制流标签作用域是整个外层函数，当编译器遇到一个名字的引用时，将从最内层的封闭词法块到最外层的全局块找。如  func f() {}//var g ="g"//func main ( ) { f:=f fmt.Println(f)//fmt.Println(g)//}main函数的f覆盖了局部代码块的函数f。
