由于昨天已经完成了与iot物联网平台的鉴权，所以今天主要是publish，而publish只需要在 ops设置好，client连接好broker之后，只需要调用func  client.Publish(topic string ,qos byte ,payload []byte) token{} 就好了，其中topic根据它规定的，只需要将deviceid调成自己的，之后的重头戏就是payload []byte了，由于它的格式要求如下   { "msgType" : "a" , "data" : [ {"serviceId":"c","serviceData":{ },"eventTime": "d " } ] }，的形式，由大括号的层数可知，有3层struct，最外层的data有方括号，而这个数组的类型定为它里面要封装的类型Data所以	{MsgType string , Data []Data} ,而[]Data数组里装了2组大括号，代表里面有两个结构，一个是最外层的Data { ServiceId string, ServiceData ServiceData,EventTime string}	以及ServiceData {A  int,  B int }.  	$$值得注意的是，golang语言中，无论是常量，变量名，还是结构体的名称都是根据首字母大小写来区分权限的，如果数据结构的名称首字母小写或者里面的变量小写，由于json.Marshal是当前main包外的，所以其无法访问我们的结构或变量，将会导致json格式化失败！！！$$		此外在实例化结构时，最好时传递指针，因为golang都是严格复制的，如果传递值，将会进行拷贝，而拷贝地址的代价比拷贝大型数据结构的代价要小很多。所以在初始化结构提的时候最好new(),而在初始化并赋值的时候则 m := &M{/ ,/ , }。而Subscribe(topic sting,qos byte, h Mqtt.MessageHandler)，需要一个消息处理方法，它的类型是mqtt.MessageHandler 所以定义如下 var h mqtt.MessageHandler = func(c mqtt.Client,m mqtt.Message){//}。	最后将鉴权发送消息做好之后，需要用docker制作一个image布置到边缘设备上，还在摸索中，但由于是在linux中操作的，所以还是学到了很多命令，如：1.删除文件sudo rm -rf /usr/**/  2.在指定文件夹下创建文件mkdir /*/*,注意的是/url表示绝对路径，而url/xx/表示相对路径。  3.解压文件 tar -C /解压url      -xzf /x/x/x/x.tar.gz 4.当权限出问题时，需要重新设置密码 passwd	