||http请求方法介绍：
HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方
法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。
GET:
幂等。GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取。
GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方
法会被网络蜘蛛等任意的访问。

HEAD:
幂等。HEAD也是向服务器发出指定资源的请求，但是服务器响应HEAD请求时不会传回响应主体，而是返回响应头。//常用来查看服务器的性能。

POST:
非幂等。POST向指定资源提交数据,请求服务器进行处理，请求数据包被包含在请求体中。

PUT:
幂等。PUT请求会向指定资源上传其最新的内容，服务器取代指定的资源的内容。

CONNECT:
CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL
加密服务器的链接与非加密的HTTP代理服务器的通信。

OPTIONS:
OPTIONS请求与HEAD类似,一半也是用于客户端查看服务器的性能。这个方法会请i去服务器返回该资源所支持的所有HTTP请求方法。判断对指定资源的访问权限。

TRACE：
TRACE请求服务器返回其收到的请求信息，该方法主要用于http请求的测试或诊断。

幂等：不影响资源的变化。
非幂等：调用多次都将产生新的资源。
||.toml配置文件：
特点：
1.大小写敏感，必须是UTF-8编码
2.可注释，注释符号 #
3.空白符：tab(0x09)或spave(0x20)
4.换行符：LF(0x0A)或CRLF(0x0D 0x0A)
5.键值对：同一行，无值的键不用，每行只能保存一个键值对
6.TOML主要结构是键值对，与JSON类似，值必须是如下类型:string interger float boolean datetime array table
//
注释：
#这是注释
字符串:
1.基本字符串：由双引号包裹，所有Unicode字符均可出现，除了双引号、反斜线、控制字符(U+0000 to U+001F)需要转义。
str = "str"
2.多行-基本字符串：由三个双引号包裹，除了分隔符开始的换行外，字符串内的换行将被保留：
str = """
Im wuff
Im lxd"""
3.字面量字符串：由单引号包裹，其内不允许转义，因此可以方便的表示基本字符串中需要转义的内容
path='c:Users\desktop'
4.多行-字面量字符串
str='''
a
b'''

数值：
int1=+99
Bool值：
bool=true
日期：
date=1996-09-24T12:00:00Z

数组：数组使用方括号包裹。空格会被忽略。元素使用逗号分隔。
注意，同一个数组下不允许混用数据类型。
array1=[1,2,3]

表格：表格（也叫哈希表或字典）是键值对的集合。它们在方括号内，自成一行。注意和数组相区分，数组只有值。即go语言中的结构
[table]
在此之下，直到下一个　table 或　EOF 之前，是这个表格的键值对。键在左，值在右，等号在中间。键以非空字符开始，以等号前的非空字符为结尾。键值对是无序的。
[table]key = "value"
你可以随意缩进，使用 Tab 或空格。为什么要缩进呢？因为你可以嵌套表格。
嵌套表格的表格名称中使用.符号。你可以任意命名你的表格，只是不要用点，点是保留的。
[dog.tater]type = "pug"
以上等价于如下的 JSON 结构：
{ "dog": { "tater": { "type": "pug" } } }
如果你不想的话，你不用声明所有的父表。
空表是允许的，其中没有键值对。
只要父表没有被直接定义，而且没有定义一个特定的键，你可以继续写入：
copy
[a.b]
c = 1
[a]
d = 2

表格数组：最后要介绍的类型是表格数组。表格数组可以通过包裹在双方括号内的表格名来表达。使用相同的双方括号名称的表格是同一个数组的元素。
[[products]]name = "Hammer"sku = 738594937
[[products]]
[[products]]name = "Nail"sku = 284758393color = "gray"
等价与一下JSON结构体：
{
  "products": [
    { "name": "Hammer", "sku": 738594937 },
    { },
    { "name": "Nail", "sku": 284758393, "color": "gray" }
  ]}



