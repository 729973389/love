||Go package context
My code:
$$ ctx, cancel := context.WithCancel(context.Background())
Mysignal := make(chan os.Signal, 1)
	signal.Notify(Mysignal)
	go func() {
		for {
			select {
			case s := <-Mysignal:
				switch s {
				case os.Kill:
					cancel()
				case os.Interrupt:
					cancel()
				}
			}
		}
	}()
var wg sync.WaitGroup
	wg.Add(1)
	go root.Run(ctx, &wg)
	wg.Wait()
	cancel()
	time.Sleep(CloseTime * time.Second)
	log.Warning("Exit main")
$$
And in root.Run:
$$ for {
		select {
		case <-ctx.Done():
			log.Warning("closing run")
			return
		}
	}$$

|Context carries:
1.deadlines signal
2.cancellation signal
3.other request-scoped values across API boundaries and between processes.

|Suggestion:
Incoming requests to a server should create a Context, and outgoing calls t
o servers should accept a Context. The chain of function calls between them
 must propagate the Context, optionally replacing it with a derived Context
 created using WithCancel, WithDeadline, WithTimeout, or WithValue. When a 
Context is canceled, all Contexts derived from it are also canceled.

|functions:WithCancle,WithDeadline,WithTimeout take a  Context(the parent) and return a derived Context(the child ) and a CancleFunc.

context,CancelFunc := Context.Withxxxx(Context.Background())
Calling the CancelFunc cancels the child and its children, removes the parent's reference to the child, and stops any associated timers.
Failing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires. The go vet tool checks that CancelFuncs are used on all control-flow paths.
|Rules to keep interfaces consistent across packages and enable static analysis tools to check context propagation:

1.Do not store Contexts inside a struct type.1.instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx:
func DoSomething(ctx context.Context, arg Arg) error {
	// ... use ctx ...
}

2.2.Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.

3.Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.

4. Contexts are safe for simultaneous use by multiple goroutines.  

//func WithCancel(parent Context) (ctx Context, cancel CancelFunc)
WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.
Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete.
func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)
func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
type CancelFunc func()
A CancelFunc tells an operation to abandon its work. A CancelFunc does not wait for the work to stop. A CancelFunc may be called by multiple goroutines simultaneously. After the first call, subsequent calls to a CancelFunc do nothing.

|type Context interface {
    // Deadline returns the time when work done on behalf of this context    // should be canceled. Deadline returns ok==false when no deadline is    // set.    Deadline() (deadline time.Time, ok bool)
    // Done returns a channel that's closed when work done on behalf of this    // context should be canceled.    Done() <-chan struct{}
    // Err returns a non-nil error value after Done is closed.    Err() error
    // Value returns the value associated with this context for key.    Value(key interface{}) interface{}}

||go websocket:

$$ func Run(ctx context.Context, wg *sync.WaitGroup) {
	defer wg.Done()
	hub := NewHub()
	go hub.Run(ctx)
	go Serve(hub)
	flag.Parse()
	//Mux holds the map that server looks up from pattern to handler
	router := http.NewServeMux()
	//hook the handler,do something before or after it.
	router.Handle("/mid", Middleware(http.Handler(http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		Servews(ctx, hub, writer, request)
	}))))
	router.HandleFunc("/hub", func(w http.ResponseWriter, r *http.Request) { Servews(ctx, hub, w, r) })
	server := http.Server{Addr: fmt.Sprintf(":%s", GetConfig().Socket), Handler: router}
	fmt.Println("listening", *addr)
	go func() {
		if err := server.ListenAndServe(); err != nil {
			log.Fatal("Run", err)
		} else {
			log.Info("main", "http.server exit normally")
		}
	}()
	for {
		select {
		case <-ctx.Done():
			log.Warning("closing run")
			return
		}
	}
}

func Middleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Println("Listening ")
		next.ServeHTTP(w, r)
		log.Println("Disconnect ")

	})

}$$
一个go web服务器正常运行起来大概需要以下几个步骤：
+ 创建listen socket，循环监听listen socke
+ accept接受新的链接请求，并创建网络连接conn，然后开启一个goroutine负责处理该链接。
+ 从该链接读取请求参数构造出http.Request对象，然后根据请求路径在路由表(ServeMux)中查找，找到对应的上层应用的处理函数，把请求交给应用处理函数。
+ 应用处理函数根据请求的参数等信息做处理，返回不同的信息给用户
+ 应用层处理完该链接请求后关闭该链接(正常流程，如果是http alive则不关闭该链接)
这里面路由表是比较重要的，我们具体分析下http.Server是如何做路由的。
路由表实际上是一个map,key是路径 ==> “/hello”
value是该路径所对应的处理函数 ==> HelloServer

|ServeMux struct:
1.type ServeMux struct {
2.mu sync.RWMutex
3.m map[string]muxEntry //存放具体的路由信息 
4.}
5.
6.type muxEntry struct {
7.explicit bool
8.h Handler
9.pattern string
10.}
11.//muxEntry.Handler是一个接口
12.type Handler interface {
13.ServeHTTP(ResponseWriter, *Request)
14.}
15.
16.//这边可能会有疑惑 
17.//http.HandleFunc("/hello/", HelloServer)
18.//helloServer是一个function啊，并没有实现ServeHTTP接口啊
19.//这是因为虽然我们传入的是一个function，但是HandleFunc会把function转为实现了ServeHTTP接口的一个新类型 HandlerFunc。
20.
21./*
22.func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
23.mux.Handle(pattern, HandlerFunc(handler))
24.}
25.
26.type HandlerFunc func(ResponseWriter, *Request)
27.// ServeHTTP calls f(w, r).
28.func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
29.f(w, r)
30.}
31.*/

||自定义server：
默认的DefaultServeMux创建的判断来自server对象，如果server对象不提供handler，才会使用默认的serveMux对象。既然ServeMux可以自定义，那么Server对象一样可以。
使用http.Server 即可创建自定义的server对象：
func main(){
    http.HandleFunc("/", index)

    server := &http.Server{
        Addr: ":8000",
        ReadTimeout: 60 * time.Second,
        WriteTimeout: 60 * time.Second,
    }
    server.ListenAndServe()}

||中间件Middleware:
中间件Middleware
所谓中间件，就是连接上下级不同功能的函数或者软件，通常进行一些包裹函数的行为，为被包裹函数提供添加一些功能或行为。前文的HandleFunc就能把签名为 func(w http.ResponseWriter, r *http.Reqeust)的函数包裹成handler。这个函数也算是中间件。
这里我们以HTTP请求的中间件为例子，提供一个log中间件，能够打印出每一个请求的log。
go的http中间件很简单，只要实现一个函数签名为func(http.Handler) http.Handler的函数即可。http.Handler是一个接口，接口方法我们熟悉的为serveHTTP。返回也是一个handler。因为go中的函数也可以当成变量传递或者或者返回，因此也可以在中间件函数中传递定义好的函数，只要这个函数是一个handler即可，即实现或者被handlerFunc包裹成为handler处理器。
func middlewareHandler(next http.Handler) http.Handler{
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
        // 执行handler之前的逻辑
        next.ServeHTTP(w, r)
        // 执行完毕handler后的逻辑
    })}
这种方式在Elixir的Plug框架中很流行，思想偏向于函数式范式。既然中间件是一种函数，并且签名都是一样，那么很容易就联想到函数一层包一层的中间件。再添加一个函数.






