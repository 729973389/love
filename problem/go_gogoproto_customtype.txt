Problem:

What:
to link a protobuf type to go struct which is already exist.

Why:cause it import to keep the type the same, or just decode the struct to bytes, but it cost a lot of compution.

How:
needed:
protoc-gen-go: go install google.golang.org/protobuf/cmd/protoc-gen-go
protoc:install
protoc-gen-gogo: go get github.com/gogo/protobuf/protoc-gen-gogo
protoc-gen-gofast: go get github.com/gogo/protobuf/protoc-gen-gofast
library:
go get github.com/gogo/protobuf/proto
go get github.com/gogo/protobuf/gogoproto
go get github.com/golang/protobuf/proto

types.proto:
```shell
syntax = "proto3";
package protobuf;
option go_package="";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message type {
  bytes hash=1[(gogoproto.customtype) = "github.com/simplechain-org/go-simplechain/common.Hash",(gogoproto.nullable) = false];
    bytes int=2[(gogoproto.customtype) = "math/big.Int", (gogoproto.nullable) = false];
      bytes address=3[(gogoproto.customtype) = "github.com/simplechain-org/go-simplechain/common.Address", (gogoproto.nullable) = false];
        bytes time =4 [(gogoproto.customtype) = "time.Time", (gogoproto.nullable) = false];
	}
```

types.go:

```go
//go:generate protoc -I=.\ --proto_path=../vendor  --proto_path=../ --gogo_out=.  types.proto transaction.proto block.proto msg.proto
```
vendor:
```shell
go mod vendor
```
