查找所有的文件并执行相关操作\f
$find . -name "*.go" -exec command {} \;   //  . 表示当前目录  -name 后接文件名 ，查找完后-exec 执行相关操作command 结尾用 {} \;结束              \f
查找所有的 .go文件，并找到里面 含有 log....chirpstack..  将chirpstack 替换成easyfetch
$find . -name "*.go" -exec sed -i '/log\..*\".*[cC]hirpstack.*\"/s/[cC]hirpstack/easyfetch/g' {} \;              //sed （stream editor），流编辑器，用程序的方式来编辑文本。sed就是玩正则表达式。 -n（ 显示处理后的结果） -i '/addr1/addr2s/src/dst/g' 替换 \f
||正则表达式:
 1.基本组成部分：
 \ :转义符，将特殊字符进行转义，忽略其特殊意义如  a\.b -> a.b  ok
 ^ :匹配行首，awk 中，^则是匹配字符串的开始如  ^wuff -> wuff.....   ok
 $ :匹配行尾，awk中，$则是匹配字符串的结尾如  wuff$ -> ...wuff  ok
 . :匹配除\n之外的任意单个字符串如  ab. -> ab.  ok
[] : 匹配包含在 [ 字符 ] 之中的任意字符如 [lL]xd -> lxd,Lxd  ok
[^] :匹配 [ ^字符 ] 之外的任意字符如  abcd[^efgh] -> abcde  !ok
[-] :匹配在 [ 字符 - 字符]之间的任意字符，要写成递归如 [0-9] -> 6  ok
 ? :匹配之前的项最多一次如： wuff?d -> wuffd,wufd  ok
 + :匹配之前的项最少一次如：wuff+d -> wuffd,wuffffffd  ok
 * :匹配之前的项任意次如: wuff+d -> wufd,wuffd,wufffffffd  ok
( ):匹配表达式，创建一个用于匹配的子串如  wu(ff)? -> wu,wuff  ok
{n} :匹配之前的项n次，n是可以为0的正整数如 hello{2} -> helloo    [0-9]{3} -> [0-9][0-9][0-9]  ok
{n,}:匹配之前的项至少n次如 hello{2,} -> helloo , helooooooooo   ok
{n,m}:撇配之前的项至少n次，最多m次，n<=m 如 [0-9]{2,3} -> 14 ，153 ok
 
2.POSIX字符类：
POSIX字符类是一个形如[:...:]的特殊元序列（meta sequence），他可以用于匹配特定的字符范围。
[:alnum:] :匹配任意一个字母或数字字符如[[:alnum:]]+ 由于这里没有实例，一下均不写!
3.元字符（meta character）
meta character 是一种perl风格的正则表达式，只有一部分文本处理工具支持它，并不是所有的文本处理工具都支持。
\b :单词边界 如 \bcool\b 匹配cool，不匹配coolant
\B :非~ 如 cool\B匹配coolant，不匹配cool
\d :单子数字字符 如b\db 匹配b2b.不匹配bcb
\D :非~ 如 b\Db 匹配bcb，不匹配b2b
\w :单个单词字符（字母、数字、_）\w 匹配1或a或_,不匹配&
\W :非~ 如\W 匹配&,不匹配1，2，_
\n :换行符 \n匹配一个新行
\s ：单个空白字符 如x\sx匹配 x x ,不匹配xx
\S ：非~ 如x\Sx匹配xkx,不匹配xx
\r :回车
\t :横向制表符
\v :垂直制表符
\f :换页符
/////////////////////////////////
当然也可以用egred来搜索并显示内容所在的文件：
$ egrep -r '.*' .

